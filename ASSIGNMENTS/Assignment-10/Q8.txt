A private constructor is legal in Java.\


Declaring a constructor as private means it cannot be accessed outside the class.

This prevents other classes from creating instances of the class directly using the new keyword.

Private constructors are commonly used in:

Singleton Design Pattern
To restrict the instantiation of a class to only one object.

Utility or Helper Classes
To prevent creating objects since the class contains only static methods.

Factory Methods
To control object creation and provide custom methods for creating instances.

public class Singleton {
    private static Singleton instance;

    // Private constructor prevents instantiation from outside
    private Singleton() {
    }

    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}
